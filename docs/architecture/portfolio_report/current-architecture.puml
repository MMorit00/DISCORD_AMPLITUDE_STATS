@startuml CurrentArchitecture
skinparam backgroundColor white
skinparam defaultFontName "PingFang SC,Microsoft YaHei,SimHei,Arial Unicode MS"
skinparam linetype ortho

title Portfolio Report - 4层分层架构 (v4.0 重构后)

skinparam package {
  FontSize 12
  BackgroundColor<<presentation>> #E1BEE7
  BorderColor<<presentation>> #8E24AA
  BackgroundColor<<application>> #FFE0B2
  BorderColor<<application>> #EF6C00
  BackgroundColor<<domain>> #BBDEFB
  BorderColor<<domain>> #1E88E5
  BackgroundColor<<infrastructure>> #C8E6C9
  BorderColor<<infrastructure>> #388E3C
  BackgroundColor<<shared>> #B2DFDB
  BorderColor<<shared>> #00695C
}

skinparam component {
  FontSize 11
}

skinparam database {
  BackgroundColor #FFF9C4
  BorderColor #FBC02D
}

skinparam cloud {
  BackgroundColor #E0F2F1
  BorderColor #009688
}

' ============================================================
' 图层划分
' ============================================================

package "Presentation\n【接口层】" <<presentation>> {
  component "main.py\nCLI 入口" as Main
}

package "Application\n【应用编排层】" <<application>> {
  component "container.py\nbuild_application" as AppContainer
  component "services/reporting_service.py\nReportingService" as AppReportingService
  component "services/transaction_service.py\nTransactionService" as AppTransactionService
  component "services/confirmation_service.py\nConfirmationService" as AppConfirmationService
  component "report_builder.py\nReportBuilder" as AppReportBuilder
  component "signals_engine.py\nSignalEngine" as AppSignalEngine
  component "confirm.py\nConfirmationPoller" as AppConfirmPoller
}

package "Domain\n【领域层】" <<domain>> {
  component "models.py\n领域模型" as DomainModels
  component "constants.py\n领域常量" as DomainConstants

  package "services" {
    component "portfolio.py\nPortfolio 聚合" as DomainPortfolio
    component "signals.py\n信号策略" as DomainSignals
    component "metrics.py\n指标计算" as DomainMetrics
    component "trading_calendar.py\n交易日历" as DomainCalendar
  }
}

package "Infrastructure\n【基础设施层】" <<infrastructure>> {
  component "github/github_repository.py\nGitHubRepository" as InfraRepository
  component "market_data/eastmoney_client.py\nEastMoneyFundAPI" as InfraEastMoney
  component "notifications/discord_webhook_client.py\nDiscordWebhookClient" as InfraDiscord
  component "state/signal_state_repository.py\nSignalStateRepository" as InfraSignalState
  component "config/loader.py\nConfigLoader" as InfraConfigLoader
}

package "Config & Shared\n【共用支持层】" <<shared>> {
  component "config/settings.py\nSettings" as ConfigSettings
  component "shared/constants.py\n共享常量" as SharedConstants
  component "shared/types.py\nResult 等" as SharedTypes
  component "shared/utils.py\n工具函数" as SharedUtils
}

' ============================================================
' 外部资源
' ============================================================

cloud "GitHub API" as ExtGitHub
cloud "天天基金/东方财富" as ExtFundAPI
cloud "Discord Webhook" as ExtDiscord
cloud "GitHub Actions\n定时触发" as ExtCron

database "transactions.csv" as DataTx
database "holdings.json" as DataHoldings
database "state.json" as DataState
database "cache/*.json" as DataCache
file "config.yaml" as FileConfig

' ============================================================
' 依赖方向
' ============================================================

ExtCron --> Main : 调度执行

Main --> AppContainer : 构建上下文

AppContainer --> InfraRepository : GitHub 仓储
AppContainer --> InfraEastMoney : 行情服务
AppContainer --> DomainCalendar : 交易日历实例
AppContainer --> DomainMetrics : 指标计算器
AppContainer --> AppSignalEngine
AppContainer --> AppReportingService
AppContainer --> AppTransactionService
AppContainer --> AppConfirmationService
AppContainer --> InfraDiscord

AppReportingService --> DomainPortfolio : 纯计算
AppReportingService --> AppSignalEngine : 生成信号
AppReportingService --> AppReportBuilder : 生成文本
AppReportingService --> InfraRepository : 读写交易/持仓
AppReportingService --> InfraEastMoney : 获取净值
AppReportingService --> InfraDiscord : 发送报告

AppTransactionService --> InfraRepository : 交易操作

AppConfirmationService --> AppConfirmPoller

AppSignalEngine --> DomainSignals : 冷却/策略
AppSignalEngine --> InfraSignalState : 状态持久化
AppSignalEngine --> DomainMetrics : 指标计算

AppConfirmPoller --> InfraRepository : 更新交易
AppConfirmPoller --> InfraEastMoney : 查询净值
AppConfirmPoller --> InfraDiscord : 通知
AppConfirmPoller --> DomainCalendar : 推演日期

DomainPortfolio --> DomainModels

InfraRepository --> ExtGitHub
InfraRepository --> DataTx
InfraRepository --> DataHoldings

InfraEastMoney --> ExtFundAPI
InfraEastMoney --> DataCache

InfraDiscord --> ExtDiscord

InfraSignalState --> DataState

' ============================================================
' 核心流程说明
' ============================================================

note right of AppReportingService
  <b>报告流程</b>
  1. CLI 触发 `generate_report`
  2. 拉取配置 (ConfigLoader)
  3. GitHubRepository 读取交易
  4. EastMoneyFundAPI 获取行情
  5. Portfolio 聚合/计算权重
  6. SignalEngine 依据策略生成信号
  7. ReportBuilder 生成文本
  8. DiscordWebhookClient 可选发送

  <b>确认轮询</b>
  - ConfirmationPoller 读取待确认交易
  - EastMoney 校验净值
  - GitHubRepository 更新 CSV
  - Discord 通知结果

  <b>层间约束</b>
  - Presentation 仅依赖 Application
  - Application 依赖 Domain/Infrastructure/Config+Shared
  - Domain 仅依赖 Shared
  - Infrastructure 可依赖 Shared & Config
end note

' ============================================================
' 图例
' ============================================================

legend right
  |= 4 层分层约束 |
  | Presentation | 主入口、渠道适配 |
  | Application | 用例编排、依赖整合 |
  | Domain | 纯业务逻辑、无 IO |
  | Infrastructure | 外部系统适配 |

  |= 关键组件 |
  | build_application | 集中装配依赖 |
  | ReportingService | 报告 & 信号提醒 |
  | TransactionService | 交易与状态操作 |
  | ConfirmationService | 份额确认轮询 |
  | SignalEngine | 信号生成 orchestrator |
  | Portfolio | 组合聚合根 (无外部依赖) |
  | GitHubRepository | GitHub CSV 仓储 |
  | EastMoneyFundAPI | 行情与估值适配器 |

  |= 共享能力 |
  | shared/constants | 阈值、字段、默认格式 |
  | shared/types | 通用 Result/Holdings |
  | config/settings | 环境配置入口 |
  | config/loader | YAML 文件读取 |
endlegend

@enduml
